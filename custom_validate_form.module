<?php

/**
 * Implements hook_menu().
 */
function custom_validate_form_menu() {
  $items['admin/config/system/validate_form'] = array(
    'title'            => 'Validate forms',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('custom_validate_form_setting'),
    'access arguments' => array('administer site configuration'),
    'file'             => 'custom_validate.form.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function custom_validate_form_form_alter(&$form, &$form_state, $form_id) {
  $form_setting = variable_get('custom_validate_form_setting', array());
  if (in_array($form_id, $form_setting)) {
    $form['#validate'][] = 'custom_validate_form_spam';
  }
}

/**
 * custom function for validate form
 * @see \custom_validate_form_form_alter()
 * @param $form
 * @param $form_state
 */
function custom_validate_form_spam($form, &$form_state) {
  $results = custom_validate_form_get_field_name_recursive($form, '', array(
    'textfield',
    'textarea',
  ));
  array_walk_recursive($results, function ($value) use (&$names) {
    $names[] = $value;
  });
  $names = array_unique($names); //form_set_error($field_name, 'url field');

  $is_link = custom_validate_form_check_fields($form_state['values'], $names);

  if ($is_link) {
    $save_lang_setting = variable_get('custom_validate_language_setting', array('en' => 'Error'));

    global $language;
    $lang_name = $language->language;
    form_set_error('values', $save_lang_setting[$lang_name]);
    return;
  }

}

/**
 * get element form
 * @see \custom_validate_form_form_alter()
 * @param $form - form
 * @param string $key - key children element
 * @param array $type - type element
 *
 * @return array|bool
 */
function custom_validate_form_get_field_name_recursive($form, $key = '', $type = array()) {
  $names = array();
  if (is_array($form)) {
    foreach ($form as $form_key => $form_item) {
      if (is_array($form_item)) {
        $names_recursive = custom_validate_form_get_field_name_recursive($form_item, $form_key, $type);
        if ($names_recursive) {
          $names[] = $names_recursive;
        }
      }
      else {
        if (is_string($form_item) && in_array($form_item, $type) && array_key_exists('#id', $form)) {
          $names[] = $key;
        }
      }
    }

    return $names;
  }

  return FALSE;
}


/**
 *  function check element form
 * @see custom_validate_form_spam()
 * @param $fields
 * @param $names
 *
 * @return bool
 */
function custom_validate_form_check_fields($fields, $names) {
  $result = FALSE;
  array_walk_recursive($fields, function ($value, $field_name) use (&$names, &$result) {
    if (in_array($field_name, $names) && !empty($value)) {
      if (custom_validate_form_is_url($value)) {
        $result = TRUE;
      }
    }
  });
  return $result;
}

/**
 * function check value element to url
 * @see \custom_validate_form_check_fields()
 * @param $value
 *
 * @return bool|int
 */
function custom_validate_form_is_url($value) {
  $pattern = '|http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i';
  $is_link = preg_match($pattern, $value);
  if ($is_link) {
    return $is_link;
  }
  else {
    $pattern = '|www?\.[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i';
    $is_link = preg_match($pattern, $value);
    if ($is_link) {
      return $is_link;
    }
  }

  return FALSE;
}